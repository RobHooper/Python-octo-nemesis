#!/usr/bin/python2.7

# Regex to get brackets
#([\(][^\(\)]*[\)])
#([\{][^\{\}]*[\}])
#([\[][^\[\]]*[\]])

## Regex to get smallest brackets
#([\(\[\{][^\(\[\{\)\]\}]*[\)\}\]])
## if first and last character dont match then error
import re

REGEX = '([\(\[\{][^\(\[\{\)\]\}]*[\)\}\]])'
REGEX2 = '([\(\[\{\)\]\}])'
CBRACK = {'(':')','[':']','{':'}'}

def checkio(expression):
    for char in expression:
        # Get smallest brackets
        m = re.search(REGEX, expression)
        if m == None:
            # If there are unclosed brackets
            n = re.search(REGEX2, expression)
            if n == None:
                print "True"
                return True
            else:
                print "False"
                return False

        # Check char 1 and -1 are the same type
        X = m.group(0)[:1]
        if CBRACK[X] != m.group(0)[-1:]:
            # If the brackets are of different types
            print "False"
            return False

        # Else loop using same line but replace smallest brackets with blank
        expression = re.sub(REGEX, '', expression)
    # End Of Loop


#These "asserts" using only for self-checking and not necessary for auto-testing
if __name__ == '__main__':
    assert checkio(u"((5+3)*2+1)") == True, "Simple"
    assert checkio(u"{[(3+1)+2]+}") == True, "Different types"
    assert checkio(u"(3+{1-1)}") == False, ") is alone inside {}"
    assert checkio(u"[1+1]+(2*2)-{3/3}") == True, "Different operators"
    assert checkio(u"(({[(((1)-2)+3)-3]/3}-3)") == False, "One is redundant"
    assert checkio(u"2+3") == True, "No brackets, no problem"
    assert checkio(u"(((1+(1+1))))]") == False, "Test 11"
